[tool.uv.workspace]
members = [
  "shared/*", 
  "src/*"
]

[project]
name = "iphoto-downloader-workspace"
version = "0.1.0"
description = "A monorepo workspace for iphoto-downloader tools"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
license = { file = "LICENSE" }
keywords = ["icloud", "photos", "sync", "backup", "workspace"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "uv",
    "iphoto-downloader",
    "auth2fa",
]

[tool.uv.sources]
iphoto-downloader = { workspace = true }
auth2fa = { workspace = true }

[project.urls]
Homepage = "https://github.com/your-username/iphoto-downloader"
Repository = "https://github.com/your-username/iphoto-downloader"
Issues = "https://github.com/your-username/iphoto-downloader/issues"

[dependency-groups]
dev = [
    "mypy>=1.16.1",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "pytest-timeout>=2.3.1",
    "psutil>=5.9.0",
    "ruff>=0.12.2",
    "pyinstaller>=6.0.0",
    "pillow>=11.3.0",
]

[tool.pytest.ini_options]
testpaths = ["tests", "shared/*/tests", "src/*/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov=shared",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=55",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests requiring real iCloud credentials",
    "slow: Slow tests",
    "manual: Manual tests requiring user interaction (excluded from CI/CD)",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
# Bandit security scanner configuration
# Skip B110: try_except_pass - Allow try/except with pass statements for intentional error suppression
skips = ["B110"]
exclude_dirs = ["tests", "build", "dist", ".venv", ".git"]
