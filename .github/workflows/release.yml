name: Release - Build and Publish

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

jobs:
  version-validation:
    name: Validate and Prepare Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag_name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
    
    - name: Set up Python
      run: uv python install 3.12
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          # Extract version from release tag
          TAG_NAME="${{ github.event.release.tag_name }}"
          VERSION="${TAG_NAME#v}"  # Remove 'v' prefix if present
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Use manually provided version
          TAG_NAME="${{ github.event.inputs.version }}"
          VERSION="${TAG_NAME#v}"  # Remove 'v' prefix if present
        else
          echo "❌ Invalid trigger for release workflow"
          exit 1
        fi
        
        echo "Tag: $TAG_NAME"
        echo "Version: $VERSION"
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Validate version format
      run: |
        python -c "
        import sys
        sys.path.insert(0, 'src/iphoto_downloader/src')
        from iphoto_downloader.version import parse_version
        try:
            parse_version('${{ steps.version.outputs.version }}')
            print('✅ Version format is valid: ${{ steps.version.outputs.version }}')
        except ValueError as e:
            print(f'❌ Invalid version format: {e}')
            sys.exit(1)
        "
    
    - name: Update VERSION file
      run: |
        echo "${{ steps.version.outputs.version }}" > VERSION
        echo "✅ VERSION file updated to: ${{ steps.version.outputs.version }}"

  build-windows:
    name: Build Windows Executable
    runs-on: windows-latest
    needs: version-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Update VERSION file for Windows build
      run: |
        echo "${{ needs.version-validation.outputs.version }}" > VERSION
        echo "Building Windows version: ${{ needs.version-validation.outputs.version }}"

    - name: Create .env file for testing
      run: |
        copy .env.example .env
        echo "✓ Created .env file from .env.example for testing"

    - name: Run tests before building
      run: |
        uv run pytest -m "not manual" --tb=short

    - name: Build Windows executables
      run: |
        powershell -ExecutionPolicy Bypass -File build_windows.ps1

    - name: Test built executables
      run: |
        $env:PYTHONIOENCODING = "utf-8"
        uv run python tests/manuel/test_build.py "dist\iphoto_downloader.exe" --summary-only

    - name: Create Windows artifacts directory with versioned names
      run: |
        $version = "${{ needs.version-validation.outputs.version }}"
        mkdir windows-artifacts
        
        # Copy with versioned names
        copy "dist\iphoto_downloader.exe" "windows-artifacts\iphoto_downloader-v${version}.exe"
        copy "dist\iphoto_downloader_credentials.exe" "windows-artifacts\iphoto_downloader_credentials-v${version}.exe"
        
        # Also keep original names for compatibility
        copy "dist\iphoto_downloader.exe" "windows-artifacts\"
        copy "dist\iphoto_downloader_credentials.exe" "windows-artifacts\"
        
        echo "Created Windows executables with version: v${version}"

    - name: Upload Windows build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-executables-v${{ needs.version-validation.outputs.version }}
        path: windows-artifacts/

  build-linux:
    name: Build Linux Executable
    runs-on: ubuntu-latest
    needs: version-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libffi-dev

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Update VERSION file for Linux build
      run: |
        echo "${{ needs.version-validation.outputs.version }}" > VERSION
        echo "Building Linux version: ${{ needs.version-validation.outputs.version }}"

    - name: Create .env file for testing
      run: |
        cp .env.example .env
        echo "✓ Created .env file from .env.example for testing"

    - name: Run tests before building
      run: |
        uv run pytest -m "not manual" --tb=short

    - name: Build Linux executables
      run: |
        chmod +x build_linux.sh
        ./build_linux.sh

    - name: Test built executables
      run: |
        uv run python tests/manuel/test_build.py dist/iphoto_downloader --summary-only

    - name: Create Linux artifacts directory with versioned names
      run: |
        VERSION="${{ needs.version-validation.outputs.version }}"
        mkdir linux-artifacts
        
        # Copy with versioned names
        cp "dist/iphoto_downloader" "linux-artifacts/iphoto_downloader-v${VERSION}"
        cp "dist/iphoto_downloader_credentials" "linux-artifacts/iphoto_downloader_credentials-v${VERSION}"
        
        # Also keep original names for compatibility
        cp "dist/iphoto_downloader" "linux-artifacts/"
        cp "dist/iphoto_downloader_credentials" "linux-artifacts/"
        
        echo "Created Linux executables with version: v${VERSION}"

    - name: Upload Linux build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-executables-v${{ needs.version-validation.outputs.version }}
        path: linux-artifacts/

  package-snap:
    name: Package for Snap Store
    runs-on: ubuntu-latest
    needs: [version-validation, build-linux]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Linux executables
      uses: actions/download-artifact@v4
      with:
        name: linux-executables-v${{ needs.version-validation.outputs.version }}
        path: linux-executables/

    - name: Install snapcraft
      run: |
        sudo apt update
        sudo apt install -y snapd
        sudo snap install core
        sudo snap install snapcraft --classic
        # Wait for snapd to be ready
        sudo systemctl enable --now snapd.socket
        sleep 10

    - name: Create Snap package structure
      run: |
        mkdir -p snap-package/bin
        mkdir -p snap-package/share/applications
        mkdir -p snap-package/share/doc/iphoto-downloader

    - name: Copy executables to package
      run: |
        cp linux-executables/iphoto_downloader snap-package/bin/
        cp linux-executables/iphoto_downloader_credentials snap-package/bin/
        chmod +x snap-package/bin/*

    - name: Create snapcraft.yaml
      run: |
        VERSION="${{ github.event.release.tag_name || github.event.inputs.version }}"
        VERSION=${VERSION#v}  # Remove 'v' prefix if present
        
        cat > snapcraft.yaml << EOF
        name: iphoto-downloader
        version: '${VERSION}'
        summary: iCloud Photo Synchronization Tool
        description: |
          A tool for synchronizing photos from iCloud to local storage with
          intelligent deletion tracking and album filtering capabilities.
          
          Features include:
          - Bidirectional sync with iCloud Photos
          - Smart deletion tracking to prevent re-downloads
          - Album-based filtering and organization
          - 2FA authentication support with Pushover notifications
          - Cross-platform compatibility

        grade: stable
        confinement: strict
        base: core20
        architectures:
          - build-on: amd64

        apps:
          iphoto-downloader:
            command: bin/iphoto_downloader
            plugs:
              - home
              - network
              - removable-media
          iphoto-downloader-credentials:
            command: bin/iphoto_downloader_credentials
            plugs:
              - home
              - network

        parts:
          iphoto-downloader:
            plugin: dump
            source: snap-package/
        EOF

    - name: Create desktop entry
      run: |
        cat > snap-package/share/applications/iphoto-downloader.desktop << EOF
        [Desktop Entry]
        Name=iPhoto Downloader
        Comment=iCloud Photo Synchronization Tool
        Exec=iphoto-downloader.iphoto-downloader
        Icon=\${SNAP}/share/pixmaps/iphoto-downloader.png
        Terminal=true
        Type=Application
        Categories=Graphics;Photography;
        EOF

    - name: Copy documentation
      run: |
        cp USER-GUIDE.md snap-package/share/doc/iphoto-downloader/
        cp LICENSE snap-package/share/doc/iphoto-downloader/copyright

    - name: Prepare snap build environment
      run: |
        # Ensure core20 base is available
        sudo snap install core20
        sudo snap refresh
        # Display available snaps for debugging
        snap list

    - name: Build Snap package
      run: |
        # Clean any previous build artifacts
        rm -rf parts/ stage/ prime/ snap/ *.snap || true
        
        # Use destructive mode to build directly on host (no LXD containers needed)
        # Add retry logic and better error handling
        for i in {1..3}; do
          echo "Attempt $i to build snap package..."
          # Clean previous attempt
          if [ $i -gt 1 ]; then
            echo "Cleaning previous build attempt..."
            rm -rf parts/ stage/ prime/ snap/ *.snap || true
            snapcraft clean --destructive-mode || true
          fi
          
          if snapcraft --destructive-mode; then
            echo "Snap package built successfully!"
            break
          else
            echo "Build attempt $i failed, retrying..."
            if [ $i -eq 3 ]; then
              echo "All build attempts failed"
              exit 1
            fi
            sleep 30
          fi
        done

    - name: Upload Snap package artifact
      uses: actions/upload-artifact@v4
      with:
        name: snap-package
        path: iphoto-downloader_*.snap

  package-winget:
    name: Package for WinGet
    runs-on: windows-latest
    needs: [version-validation, build-windows]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Windows executables
      uses: actions/download-artifact@v4
      with:
        name: windows-executables-v${{ needs.version-validation.outputs.version }}
        path: windows-executables/

    - name: Install WinGet Create
      run: |
        Invoke-WebRequest -Uri "https://github.com/microsoft/winget-create/releases/latest/download/wingetcreate.exe" -OutFile "wingetcreate.exe"

    - name: Create WinGet package manifest
      run: |
        $version = "${{ github.event.release.tag_name || github.event.inputs.version }}"
        $version = $version -replace '^v', ''  # Remove 'v' prefix if present
        
        # Create installer for main executable
        $mainSize = (Get-Item windows-executables/iphoto_downloader.exe).Length
        $credSize = (Get-Item windows-executables/iphoto_downloader_credentials.exe).Length
        
        # Create manifest directory
        New-Item -ItemType Directory -Force -Path "winget-manifests"
        
        # Create version manifest
        $versionManifest = "PackageIdentifier: HenningUe.iPhotoDownloader`n"
        $versionManifest += "PackageVersion: $version`n"
        $versionManifest += "DefaultLocale: en-US`n"
        $versionManifest += "ManifestType: version`n"
        $versionManifest += "ManifestVersion: 1.2.0"
        
        # Create installer manifest
        $installerManifest = "PackageIdentifier: HenningUe.iPhotoDownloader`n"
        $installerManifest += "PackageVersion: $version`n"
        $installerManifest += "Installers:`n"
        $installerManifest += "- Architecture: x64`n"
        $installerManifest += "  InstallerType: exe`n"
        $installerManifest += "  InstallerUrl: https://github.com/HenningUe/iphoto-downloader/releases/download/${{ github.event.release.tag_name || github.event.inputs.version }}/iphoto_downloader.exe`n"
        $installerManifest += "  InstallerSha256: # Will be calculated by WinGet team`n"
        $installerManifest += "  InstallerSwitches:`n"
        $installerManifest += "    Silent: `"`"`n"
        $installerManifest += "    SilentWithProgress: `"`"`n"
        $installerManifest += "ManifestType: installer`n"
        $installerManifest += "ManifestVersion: 1.2.0"
        
        # Create locale manifest
        $localeManifest = "PackageIdentifier: HenningUe.iPhotoDownloader`n"
        $localeManifest += "PackageVersion: $version`n"
        $localeManifest += "PackageLocale: en-US`n"
        $localeManifest += "Publisher: HenningUe`n"
        $localeManifest += "PublisherUrl: https://github.com/HenningUe`n"
        $localeManifest += "PublisherSupportUrl: https://github.com/HenningUe/iphoto-downloader/issues`n"
        $localeManifest += "Author: HenningUe`n"
        $localeManifest += "PackageName: iPhoto Downloader`n"
        $localeManifest += "PackageUrl: https://github.com/HenningUe/iphoto-downloader`n"
        $localeManifest += "License: MIT`n"
        $localeManifest += "LicenseUrl: https://github.com/HenningUe/iphoto-downloader/blob/main/LICENSE`n"
        $localeManifest += "Copyright: Copyright (c) HenningUe`n"
        $localeManifest += "ShortDescription: iPhoto Downloader Tool with intelligent deletion tracking`n"
        $localeManifest += "Description: A comprehensive tool for synchronizing photos from iCloud to local storage with smart deletion tracking, album filtering, and 2FA support.`n"
        $localeManifest += "Moniker: iphoto-downloader`n"
        $localeManifest += "Tags:`n"
        $localeManifest += "- icloud`n"
        $localeManifest += "- photos`n"
        $localeManifest += "- sync`n"
        $localeManifest += "- backup`n"
        $localeManifest += "- photo-management`n"
        $localeManifest += "ManifestType: defaultLocale`n"
        $localeManifest += "ManifestVersion: 1.2.0"
        
        # Save manifests
        $versionManifest | Out-File -FilePath "winget-manifests/HenningUe.iPhotoDownloader.yaml" -Encoding UTF8
        $installerManifest | Out-File -FilePath "winget-manifests/HenningUe.iPhotoDownloader.installer.yaml" -Encoding UTF8
        $localeManifest | Out-File -FilePath "winget-manifests/HenningUe.iPhotoDownloader.locale.en-US.yaml" -Encoding UTF8

    - name: Upload WinGet manifests
      uses: actions/upload-artifact@v4
      with:
        name: winget-manifests
        path: winget-manifests/

  publish-to-winget:
    name: Publish to WinGet
    runs-on: windows-latest
    needs: [version-validation, package-winget, publish-release]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download WinGet manifests
      uses: actions/download-artifact@v4
      with:
        name: winget-manifests
        path: winget-manifests/

    - name: Submit to WinGet Community Repository
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        Write-Host "=== WinGet Package Submission ==="
        Write-Host ""
        Write-Host "⚠️  Automatic submission to WinGet requires special permissions that GitHub Actions doesn't have."
        Write-Host "The manifests have been generated and are ready for manual submission."
        Write-Host ""
        
        # Display manifest contents for manual submission
        Write-Host "=== Generated WinGet Manifests ==="
        Get-ChildItem "${{ github.workspace }}/winget-manifests/" -Filter "*.yaml" | ForEach-Object {
          Write-Host ""
          Write-Host "--- $($_.Name) ---"
          Get-Content $_.FullName
        }
        
        Write-Host ""
        Write-Host "=== Manual Submission Instructions ==="
        Write-Host "To submit this package to WinGet Community Repository:"
        Write-Host ""
        Write-Host "1. 🍴 Fork the repository:"
        Write-Host "   - Go to: https://github.com/microsoft/winget-pkgs"
        Write-Host "   - Click 'Fork' to create your own copy"
        Write-Host ""
        Write-Host "2. 📁 Create the package directory:"
        Write-Host "   - In your fork, create: manifests/h/HenningUe/iPhotoDownloader/${{ needs['version-validation'].outputs.version }}/"
        Write-Host ""
        Write-Host "3. 📄 Add the manifest files:"
        Write-Host "   - Copy the three YAML files shown above to the directory"
        Write-Host "   - Name them exactly as shown (with version numbers)"
        Write-Host ""
        Write-Host "4. 🔄 Create a Pull Request:"
        Write-Host "   - Title: 'New package: HenningUe.iPhotoDownloader version ${{ needs['version-validation'].outputs.version }}'"
        Write-Host "   - Description:"
        Write-Host ""
        Write-Host "## Summary"
        Write-Host ""
        Write-Host "This PR adds iPhotoDownloader version ${{ needs['version-validation'].outputs.version }} to the WinGet Community Repository."
        Write-Host ""
        Write-Host "### Package Information"
        Write-Host "- **Package Identifier**: HenningUe.iPhotoDownloader"
        Write-Host "- **Version**: ${{ needs['version-validation'].outputs.version }}"
        Write-Host "- **Publisher**: HenningUe"
        Write-Host "- **License**: MIT"
        Write-Host "- **Repository**: https://github.com/HenningUe/iphoto-downloader"
        Write-Host ""
        Write-Host "### Description"
        Write-Host "A comprehensive tool for synchronizing photos from iCloud to local storage with smart deletion tracking, album filtering, and 2FA support."
        Write-Host ""
        Write-Host "### Validation"
        Write-Host "- [x] Manifests follow WinGet schema"
        Write-Host "- [x] Package builds successfully in CI/CD"
        Write-Host "- [x] Executables are properly signed and tested"
        Write-Host "- [x] License is properly specified"
        Write-Host ""
        Write-Host "### Release Notes"
        Write-Host "This release includes cross-platform executable distribution and preparation for package manager integration."
        Write-Host ""
        Write-Host "**Automated submission via GitHub Actions**"
        Write-Host ""
        Write-Host "5. 🎯 Alternative: Use WinGet Create Tool"
        Write-Host "   - Download: https://github.com/microsoft/winget-create/releases"
        Write-Host "   - Run: wingetcreate.exe new HenningUe.iPhotoDownloader"
        Write-Host ""
        Write-Host "📋 The manifests are also available as build artifacts for easy download."
        Write-Host ""
        Write-Host "✅ WinGet package preparation completed successfully!"

  publish-to-snap:
    name: Publish to Snap Store
    runs-on: ubuntu-latest
    needs: [package-snap, publish-release]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Snap package
      uses: actions/download-artifact@v4
      with:
        name: snap-package
        path: snap-package/

    - name: Install snapcraft
      run: |
        sudo snap install snapcraft --classic

    - name: Prepare Snap Store submission
      run: |
        echo "Snap package prepared for submission"
        echo "Package details:"
        snap info snap-package/*.snap || echo "Package info not available (expected for unsigned snap)"
        
        echo "Manual step required:"
        echo "1. Register app name: snapcraft register iphoto-downloader"
        echo "2. Upload snap: snapcraft upload snap-package/*.snap"
        echo "3. Release to appropriate channel (stable/candidate/beta/edge)"
        echo "4. Package available at: snap-package/"
        
        ls -la snap-package/

    - name: Store submission info
      run: |
        echo "To complete Snap Store submission:"
        echo "1. Authenticate: snapcraft login"
        echo "2. Register name: snapcraft register iphoto-downloader"
        echo "3. Upload package: snapcraft upload iphoto-downloader_*.snap"
        echo "4. Release: snapcraft release iphoto-downloader <revision> stable"
        echo ""
        echo "Snap package is ready for manual submission to Snap Store"

  publish-release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: [version-validation, build-windows, build-linux]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Windows executables
      uses: actions/download-artifact@v4
      with:
        name: windows-executables-v${{ needs.version-validation.outputs.version }}
        path: windows-executables/

    - name: Download Linux executables
      uses: actions/download-artifact@v4
      with:
        name: linux-executables-v${{ needs.version-validation.outputs.version }}
        path: linux-executables/

    - name: Create release assets
      run: |
        mkdir release-assets
        VERSION="${{ needs.version-validation.outputs.version }}"
        
        # Package Windows executables with version suffix
        cd windows-executables
        zip "../release-assets/iphoto-downloader-windows-x64-v${VERSION}.zip" iphoto_downloader.exe iphoto_downloader_credentials.exe
        cd ..
        
        # Package Linux executables with version suffix
        cd linux-executables
        tar -czf "../release-assets/iphoto-downloader-linux-x64-v${VERSION}.tar.gz" iphoto_downloader iphoto_downloader_credentials
        cd ..
        
        # Create source code ZIP (this will be done automatically by GitHub as well)
        echo "Release assets created with version suffix: v${VERSION}"
        ls -la release-assets/

    - name: Upload release assets
      uses: softprops/action-gh-release@v2
      with:
        files: |
          release-assets/*
        body: |
          ## 🚀 Release ${{ github.event.release.tag_name }}
          
          ### Downloads
          
          **Windows:**
          - 📦 [Complete Windows Package](https://github.com/HenningUe/iphoto-downloader/releases/download/${{ github.event.release.tag_name }}/iphoto-downloader-windows-x64-v${{ needs.version-validation.outputs.version }}.zip) - Both executables in one ZIP
          
          **Linux:**
          - 📦 [Complete Linux Package](https://github.com/HenningUe/iphoto-downloader/releases/download/${{ github.event.release.tag_name }}/iphoto-downloader-linux-x64-v${{ needs.version-validation.outputs.version }}.tar.gz) - Both executables in one archive
          
          **Source Code:**
          - GitHub automatically provides source code as ZIP and TAR.GZ archives
          
          ### Installation
          
          **Windows (via WinGet):**
          ```powershell
          winget install HenningUe.iPhotoDownloader
          ```
          
          **Linux (Manual Installation):**
          ```bash
          # Download and extract
          wget https://github.com/HenningUe/iphoto-downloader/releases/download/${{ github.event.release.tag_name }}/iphoto-downloader-linux-x64-v${{ needs.version-validation.outputs.version }}.tar.gz
          tar -xzf iphoto-downloader-linux-x64-v${{ needs.version-validation.outputs.version }}.tar.gz
          
          # Install to system path
          sudo mv iphoto_downloader /usr/local/bin/
          sudo mv iphoto_downloader_credentials /usr/local/bin/
          sudo chmod +x /usr/local/bin/iphoto_downloader*
          ```
          
          ### What's New
          - Full CI/CD pipeline with automatic builds
          - Cross-platform executable distribution
          - Package manager integration (WinGet for Windows, Snap for Linux)
          
          ### Getting Started
          1. Download the appropriate package for your platform
          2. Extract the executables from the archive
          3. Run `iphoto_downloader_credentials` first to set up your iCloud credentials
          4. Configure your sync settings in the created settings file
          5. Run `iphoto_downloader` to start syncing your photos!
          
          For detailed instructions, see the [User Guide](https://github.com/HenningUe/iphoto-downloader/blob/main/USER-GUIDE.md).
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
